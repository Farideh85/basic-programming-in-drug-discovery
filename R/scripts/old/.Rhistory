AUC
trapz
trapz
environment()
environment
searchpaths()
sum_two_numbers <- function(a, b) {
output <- a + b
return(output)
}
# After the function is defined you can use the function:
sum_two_numbers(5,6)
sum_two_numbers <- function(a, b) {
a + b
}
sum_two_numbers(5, 6)
a <- 1
a <- 1
my_fun <- function(input) {
a <- 5
output <- a * input
}
my_fun(1)
my_fun <- function(input) {
a <- 5
output <- a * input
return(output)
}
my_fun(input = 1)
my_fun2 <- function(input) {
output <- a * input
return(output)
}
my_fun2(input = 1)
my_fun3 <- function( b0, b1, b2, x) {
y <-  b1*x + b2*x
output = y + b1
return(y)
}
my_fun3(b0 = 2, b1 = 0.1, b2 = 0.5, x = 1:10)
sapply(my_dataframe, class)
my_list <- list(teachers = my_dataframe, stat = t.test(
subset(iris, Species == "virginica")[, "Sepal.Length"], subset(iris, Species == "setosa")[, "Sepal.Length"]) )
my_dataframe <- data.frame(names = c("Steven", "Margriet", "Gerard", "Elke"),
hobbies = c("R", "Python", "cheminformatics", "pharmacokinetics"),
sex = c("M", "F", "M", "F"),
fakeage = c(38, 30, 34, 28))
my_list <- list(teachers = my_dataframe, stat = t.test(
subset(iris, Species == "virginica")[, "Sepal.Length"], subset(iris, Species == "setosa")[, "Sepal.Length"]) )
sapply(my_dataframe, class)
sapply(my_list, class)
sapply(1:10, i + 1)
sapply(1:10, function(i) { i * 2})
rnorm(10)
1:10 + rnorm(10)
replicate(10, seq(0,1, length.out = 10) + 0.3*rnorm(10))
replicate(10, seq(0,1, length.out = 20) + 0.3*rnorm(20))
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
}
1:20 + rnorm(20)
set.seed(1234)
y_given <- 1:20 + rnorm(20)
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
}
x <- replicate(10, seq(0,1, length.out = 20) + 0.3*rnorm(20))
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
}
l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:100) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- c(b0, b1)
}
}
l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
for( i in 1:100) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- c(b0, b1)
}
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:100) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- c(b0, b1)
}
return(coef_list)
}
my_result <- l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
plot(unlist(my_result))
unlist(my_result)
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:100) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS - 5 # just to initiate the process.
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- c(b0, b1)
}
return(coef_list)
}
my_result <- l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
plot(unlist(my_result))
my_result
coef_list[[i]] <- c(bo = b0, b1 = b1)
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:100) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS - 5 # just to initiate the process.
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.1*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- list(bo = b0, b1 = b1)
}
return(coef_list)
}
my_result <- l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
plot(unlist(my_result))
my_result[[100]]
plot(my_result[[100]]$b0 + my_result[[100]]$b1*x[,1])
my_result[[100]]$b0
my_result[[100]]
my_result[[100]]$`b0`
my_result[[100]]$bo
my_result[[100]]$b1
plot(my_result[[100]]$bo + my_result[[100]]$b1*x[,1])
lines(y_given)
plot(my_result[[100]]$bo + my_result[[100]]$b1*x[,1])
lines(y_given)
points(y_given, col ="red")
plot(my_result[[100]]$bo + my_result[[100]]$b1*x[,1])
points(y_given, col ="red")
plot(y_given, col ="red")
points(my_result[[100]]$bo + my_result[[100]]$b1*x[,1])
y_given <- 1:20 + rnorm(20)
set.seed(1234)
y_given <- 1:20 + rnorm(20)
x <- replicate(10, seq(0,1, length.out = 20) + 0.05*rnorm(20))
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:100) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS - 5 # just to initiate the process.
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.2*rnorm(1)
b1 <- b1 + 0.2*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- list(bo = b0, b1 = b1)
}
return(coef_list)
}
my_result <- l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
plot(unlist(my_result))
plot(y_given, col ="red")
points(my_result[[100]]$bo + my_result[[100]]$b1*x[,1])
plot(unlist(my_result))
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:1000) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS - 5 # just to initiate the process.
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.5*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- list(bo = b0, b1 = b1)
}
return(coef_list)
}
my_result <- l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
plot(unlist(my_result))
# run both lines at once:
plot(y_given, col ="red")
plot(unlist(my_result))
# run both lines at once:
plot(y_given, col ="red")
plot(y_given, col ="red")
points(my_result[[1300]]$bo + my_result[[1300]]$b1*x[,1])
points(my_result[[1300]]$bo + my_result[[1300]]$b1*x[,1])
plot(my_result[[1300]]$bo + my_result[[1300]]$b1*x[,1])
plot(unlist(my_result))
length(my_result)
plot(y_given, col ="red")
points(my_result[[700]]$bo + my_result[[700]]$b1*x[,1])
plot(unlist(my_result))
plot(y_given, col ="red")
points(my_result[[1000]]$bo + my_result[[1000]]$b1*x[,1])
output10 <- lapply(x, function(j) l_optim_fun(x, b0, b1, y_given, n=0))
output10 <- lapply(x, function(j) l_optim_fun(x, b0=1, b1=10, y_given = y_given, n=0))
length(output10)
dim(x)
x <- asdata.frame(replicate(10, seq(0,1, length.out = 20) + 0.05*rnorm(20)))
x <- as.data.frame(replicate(10, seq(0,1, length.out = 20) + 0.05*rnorm(20)))
head(x)
x
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:1000) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS - 5 # just to initiate the process.
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.5*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- list(bo = b0, b1 = b1)
}
return(coef_list)
}
set.seed(1234)
y_given <- 1:20 + rnorm(20)
x <- as.data.frame(replicate(10, seq(0,1, length.out = 20) + 0.05*rnorm(20)))
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:1000) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS - 5 # just to initiate the process.
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.5*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- list(bo = b0, b1 = b1)
}
return(coef_list)
}
my_result <- l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
plot(unlist(my_result))
plot(y_given, col ="red")
points(my_result[[1000]]$bo + my_result[[1000]]$b1*x[,1])
output10 <- lapply(x, function(j) l_optim_fun(x, b0=1, b1=10, y_given = y_given, n=0))
length(output10)
class(output10)
output10[[2]]
set.seed(1234)
y_given <- 1:20 + rnorm(20)
x <- as.data.frame(replicate(10, seq(0,1, length.out = 20) + 0.05*rnorm(20)))
l_optim_fun <- function(x, b0, b1, y_given, n=0) {
n <- n +1
coef_list = list()
for( i in 1:100) {
y_pred <- b0 + b1*x
RSS <- sum((y_given-y_pred)^2)
RSS_new <- RSS
if(n == 1){
RSS_old = RSS - 0.5 # just to initiate the process.
}
if(RSS_new > RSS_old){
b0 <- b0 + 0.1*rnorm(1)
b1 <- b1 + 0.5*rnorm(1)
RSS_old <- RSS
}
coef_list[[i]] <- list(bo = b0, b1 = b1)
}
return(coef_list)
}
my_result <- l_optim_fun(x = x[,1],
b0=1, b1 = 10, y_given = y_given )
plot(unlist(my_result))
length(my_result)
plot(y_given, col ="red")
points(my_result[[100]]$bo + my_result[[100]]$b1*x[,1])
output10 <- lapply(x, function(j) l_optim_fun(x, b0=1, b1=10, y_given = y_given, n=0))
my_result[1:100]$bo
my_result[1:100]
plot(y_given, col ="red")
points(output10[[1]]$bo + output10[[1]]$b1*x[,1])
plot(y_given, col ="red")
points(output10[[2]]$bo + output10[[2]]$b1*x[,1])
plot(y_given, col ="red")
points(output10[[2]]$bo + output10[[2]]$b1*x[,1])
plot(output10[[2]]$bo + output10[[2]]$b1*x[,1])
output10
adderfun <- function(i, b) {
i + b
}
sapply(1:10, function(i) adderfun(i, b = 5))
lapply(iris, summary)
sapply(iris, summary)
require(dplyr)
require(tidyr)
?`%>%`
install.packages
my_dataframe
iris[ iris$Species %in% c("Virginica", "Setosa"),]
iris[ iris$Species %in% c("virginica", "setosa"),]
iris[ iris$Species %in% c("virginica", "setosa")  & iris$Sepal.Length > 5.5,]
iris[ iris$Species %in% c("virginica", "setosa")  & iris$Sepal.Length > 6,]
iris[ iris$Species %in% c("virginica", "setosa")  & iris$Sepal.Length > 6.5,]
iris[ iris$Species %in% c("virginica", "setosa")  & iris$Sepal.Length > 7.2,]
iris[ iris$Species %in% c("virginica", "setosa")  & iris$Sepal.Length %in% c( 7.2, 5),]
iris[ iris$Species %in% c("virginica", "setosa")  & iris$Sepal.Length %in% c( 7.2, 5.1),]
iris[ iris$Species %in% c("virginica", "setosa")  & iris$Sepal.Length %in% c( 7.2, 5.3),]
my_dataframe
my_dataframe %>% filter( names %in% c("Margriet", "Elke") ) %>%
select(fakeage)
my_dataframe %>% filter( names %in% c("Margriet", "Elke") )
my_dataframe
my_dataframe %>% mutate(age_confidence_limits = 1.97*sd(fakeage)/sqrt(3))
my_dataframe
my_dataframe %>% mutate(age_confidence_limits = 1.97*sd(fakeage)/sqrt(3))
my_dataframe %>%
mutate(nonsensicle_confidence_limits = 1.97*sd(fakeage)/sqrt(3)) %>%
my_dataframe %>%
mutate(nonsensicle_confidence_limits = 1.97*sd(fakeage)/sqrt(3)) %>%
my_dataframe %>%
mutate(nonsensicle_confidence_limits = 1.97*sd(fakeage)/sqrt(3)) %>%
group_by(sex) %>%
summarize(n = n(), total_age = sum(fakeage), CoV = sd(fakeage)/total_age )
my_dataframe
my_dataframe %>%
mutate(nonsensicle_confidence_limits = 1.97*sd(fakeage)/sqrt(3)) %>%
group_by(sex) %>%
summarize(n = n(), total_age = sum(fakeage), CoV = sd(fakeage)/total_age )
head(iris)
iris %>% group_by(Species) %>%
summarise_all(mean) %>%
left_join()
iris %>% group_by(Species) %>%
left_join(iris, summarise_all(mean))
mean_iris <- iris %>% group_by(Species) %>%
summarise_all(mean)
iris <- left_join(iris, mean_iris)
iris
mean_iris
iris
data(iris)
iris
?left_join
iris <- left_join(iris, mean_iris, by = Species )
iris <- left_join(iris, mean_iris, by = "Species" )
iris
head(iris)
data(iris)
mean_iris <- iris %>% group_by(Species) %>%
summarise_all(mean)
iris <- left_join(iris, mean_iris, by = "Species", suffix = c( "", "mean.") )
head(iris)
data(iris)
mean_iris <- iris %>% group_by(Species) %>%
summarise_all(mean)
iris <- left_join(iris, mean_iris, by = "Species", suffix = c( "", ".mean") )
head(iris)
# first reload iris:
data(iris)
head(iris)
iris %>% gather(iris)
iris %>% gather(iris, -Species)
iris %>% gather(iris, key = "variable", value = "value" , -Species)
iris %>% gather(key = "variable", value = "value" , -Species)
?gather
iris %>% gather(key = variable, value = value , -Species)
gather(iris, key = variable, value = value,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris %>% gather(key = variable, value = value,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris_mean <- iris %>% gather(key = variable, value = value , -Species) %>%
group_by(Species) %>%
summarise(mean)
iris_mean <- iris %>% gather(key = variable, value = value , -Species) %>%
group_by(Species) %>%
summarise(mean_value = mean(value))
iris %>% left_join(iris_mean, by = Species)
iris %>% left_join(iris_mean, by = "Species")
iris_mean <- iris %>% gather(key = variable, value = value , -Species) %>%
group_by(Species) %>%
mutate(mean_value = mean(value))
iris_mean
tail(iris_mean)
iris_mean <- iris %>% gather(key = variable, value = value , -Species) %>%
group_by(Species) %>%
mutate(mean_value = mean(value))
iris %>% gather(key = variable, value = value , -Species) %>%
group_by(Species) %>%
mutate(mean_value = mean(value))
iris %>% mutate(id = 1:nrow(iris))
iris
iris
iris <- iris %>% mutate(id = 1:nrow(iris)) # add id so we can go from long format back to wide format
iris_long <- iris %>% gather(key = variable, value = value , -(Species:id))
iris_long <- iris %>% gather(key = variable, value = value , -(Species:id))
iris_long
iris_wide <- iris_long %>% spread( key = variable, value )
iris_wide
data(iris)
iris_long <- iris %>% gather(key = variable, value = value , -(Species:id))
iris_long <- iris %>% gather(key = variable, value = value , -(Species))
iris_wide <- iris_long %>% spread( key = variable, value )
iris <- iris %>% mutate(id = 1:nrow(iris)) # add id so we can go from long format back to wide format
iris_long <- iris %>% gather(key = variable, value = value , -(Species:id))
iris_wide <- iris_long %>% spread( key = variable, value )
iris_wide
iris %>% gather(key = variable, value = value , -Species) %>%
group_by(Species) %>%
mutate(mean_value = mean(value))
methods(plot)
save.image("D:/Data/teaching/PhD course data analysis and statistics in R/2018/basic-programming-in-drug-discovery/R/scripts/.RData")
